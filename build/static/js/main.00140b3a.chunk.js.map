{"version":3,"sources":["serviceWorker.js","services/base/source.enum.ts","stores/index.ts","services/base/base.service.ts","services/azure.service.ts","services/db.service.ts","components/table.tsx","routes/home/index.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","SourceEnum","mainStore","reviews","this","key","firstProductId","secondProductId","firstProduct","secondProduct","firstActiveRegion","secondActiveRegion","startDate","endDate","selectionRange","observable","Date","computed","action","BaseService","Object","classCallCheck","createClass","value","axios","create","baseURL","timeout","headers","x-rapidapi-key","x-rapidapi-host","Ocp-Apim-Subscription-Key","Content-Type","Accept","source","rapidApi","undefined","rapidApiInstance","azureInstance","azure","AzureService","_sentimentRequest","asyncToGenerator","regenerator_default","a","mark","_callee","request","response","wrap","_context","prev","next","getInstance","post","sent","abrupt","data","stop","_x","apply","arguments","LocalService","_getDataFromLocal","filtered","local","filter","item","date","slice","_x2","_x3","alibaba_uk","alibaba_us","amazon_uk","amazon_us","useStyles","makeStyles","table","minWidth","TableList","_ref","title","rows","classes","children","react_default","createElement","toUpperCase","TableContainer","component","Paper","Table","className","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","row","rating","scope","confidenceScores","positive","negative","neutral","review","substring","labels","datasets","options","scales","yAxes","ticks","beginAtZero","bgColor","Home","observer","home_class","_React$Component","props","_this","possibleConstructorReturn","getPrototypeOf","call","handleChangeFirstActiveRegion","event","setFirstActiveRegion","target","handleChangeSecondActiveRegion","setSecondActiveRegion","state","firstNegativeProductMean","firstPositiveProductMean","firstNeutralProductMean","secondPositiveProductMean","secondNegativeProductMean","secondNeutralProductMean","isReady","isLoading","outliers1","outliers2","extremeNegative1","extremeNegative2","extremePositive1","extremePositive2","handleSelect","bind","assertThisInitialized","getKeywords","inherits","setSelectionRange","selection","setFirstProduct","setSecondProduct","_getKeywords","_callee2","keyword1","keyword2","firstProductReviews","secondProductReviews","documentModel","_ret","_this2","_context4","setState","getSelectionRange","getDataFromLocal","id","language","text","delegateYield","graphData2","loopCount","_loop","i","documentModel2","loopCount2","graphData1","_loop2","extremesPositive1","extremesPositive2","extremesNegative1","extremesNegative2","_context3","Math","floor","length","slicedData","sentimentRequest","documents","forEach","k","find","z","push","sentiment","v","_context2","includes","index","label","backgroundColor","borderColor","sort","b","l","reduce","getFirstProduct","getSecondProduct","t0","t1","alert","_componentDidMount","_callee3","_context5","_this$state","styles","container","style","display","justifyContent","flexDirection","FormControl","margin","InputLabel","shrink","Select","onChange","handleChangeFirst","MenuItem","handleChangeSecond","dist","ranges","editableDateInputs","moveRangeOnFirstSelection","Button","variant","onClick","color","index_modern","type","toFixed","width","table_TableList","lib","get","getFirstActiveRegion","getSecondActiveRegion","React","Component","App","height","Route","exact","path","ReactDOM","render","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qn2wEAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,uFClBMC,uJCgGGC,EADG,mkBA9CSC,GACnBC,KAAKD,QAAUA,kDAIKA,GACpBC,KAAKD,QAAUA,4CAIDE,GACdD,KAAKE,eAAiBD,6CAIPA,GACfD,KAAKG,gBAAkBF,0CAIXA,GACZD,KAAKI,aAAeH,2CAIPA,GACbD,KAAKK,cAAgBJ,+CAIJA,GACjBD,KAAKM,kBAAoBL,gDAGPA,GAClBD,KAAKO,mBAAqBN,4CAGZO,EAAeC,GAC7BT,KAAKU,eAAeF,UAAYA,EAChCR,KAAKU,eAAeD,QAAUA,qCAlE9B,OAAOT,KAAKD,gDAKZ,OAAOC,KAAKI,0DAIZ,OAAOJ,KAAKM,gEAIZ,OAAON,KAAKO,4DAKZ,OAAOP,KAAKK,wDAIZ,OAAOL,KAAKU,wEAxCfC,6EAAqC,uDACrCA,6EAAsC,2CACtCA,6EAA0B,2CAC1BA,8EAA8B,iDAC9BA,6EAAoC,mDACpCA,6EAAqC,gDACrCA,6EAAkC,wDAClCA,6EAAmC,2DACnCA,6EAAuC,wDACvCA,6EAAwC,oDACxCA,6EAAiC,CAC9BH,UAAW,IAAII,KAAK,cACpBH,QAAS,IAAIG,KACbX,IAAK,sDAGRY,uHAKAA,iIAIAA,uIAIAA,mIAKAA,+HAIAA,qIAKAC,2IAKAA,sIAKAA,iIAKAA,+HAKAA,6HAKAA,kIAKAA,uIAIAA,oIAIAA,kHDtFOjB,+DEGL,IAAekB,EAAtB,oBAAAA,IAAAC,OAAAC,EAAA,EAAAD,CAAAhB,KAAAe,GAAA,OAAAC,OAAAE,EAAA,EAAAF,CAAAD,EAAA,OAAAd,IAAA,WAAAkB,MAAA,WAKQ,OAAOC,IAAMC,OAAO,CAChBC,QAAS,oCACTC,QAAS,IACTC,QAAS,CACLC,iBAAkB,qDAClBC,kBAAmB,iCAVnC,CAAAzB,IAAA,QAAAkB,MAAA,WAgBQ,OAAOC,IAAMC,OAAO,CAChBC,QAAS,+EACTC,QAAS,IACTC,QAAS,CACLG,4BAA6B,mCAC7BC,eAAgB,mBAChBC,OAAS,wBAtBzB,CAAA5B,IAAA,cAAAkB,MAAA,SA2BuBW,GACf,OAAIA,GAAUjC,EAAWkC,cACSC,IAA1BhC,KAAKiC,kBACNjC,KAAKiC,iBAAoBjC,KAAK+B,WACtB/B,KAAKiC,kBAELjC,KAAKiC,sBAGWD,IAAvBhC,KAAKkC,eACLlC,KAAKkC,cAAgBlC,KAAKmC,QACnBnC,KAAKkC,eAELlC,KAAKkC,kBAxC5BnB,EAAA,GAAsBA,EACXkB,sBAAmCD,EADxBjB,EAEXmB,mBAAgCF,ECDpC,IAAeI,EAAtB,oBAAAA,IAAApB,OAAAC,EAAA,EAAAD,CAAAhB,KAAAoC,GAAA,OAAApB,OAAAE,EAAA,EAAAF,CAAAoB,EAAA,OAAAnC,IAAA,mBAAAkB,MAAA,eAAAkB,EAAArB,OAAAsB,EAAA,EAAAtB,CAAAuB,EAAAC,EAAAC,KAAA,SAAAC,EAEkCC,GAFlC,IAAAC,EAAA,OAAAL,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EAGmCjC,EAAYkC,YAAYpD,EAAWsC,OAAQe,KAClE,GAAGP,GAJf,cAGcC,EAHdE,EAAAK,KAAAL,EAAAM,OAAA,SAKeR,EAASS,MALxB,wBAAAP,EAAAQ,SAAAZ,EAAA1C,SAAA,gBAAAuD,GAAA,OAAAlB,EAAAmB,MAAAxD,KAAAyD,YAAA,MAAArB,EAAA,sHCEsBsB,EAAtB,oBAAAA,IAAA1C,OAAAC,EAAA,EAAAD,CAAAhB,KAAA0D,GAAA,OAAA1C,OAAAE,EAAA,EAAAF,CAAA0C,EAAA,OAAAzD,IAAA,mBAAAkB,MAAA,eAAAwC,EAAA3C,OAAAsB,EAAA,EAAAtB,CAAAuB,EAAAC,EAAAC,KAAA,SAAAC,EASkCZ,EAAgBtB,EAAgBC,GATlE,IAAA4C,EAAAO,EAAA,OAAArB,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAUYK,EAAOrD,KAAK6D,MAAM/B,GAElB8B,EAAYP,EAAKS,OAAO,SAACC,GACzB,OAAO,IAAInD,KAAKmD,EAAKC,OAAS,IAAIpD,KAAKJ,IAAc,IAAII,KAAKmD,EAAKC,OAAS,IAAIpD,KAAKH,KAbjGqC,EAAAM,OAAA,SAeeQ,EAASK,MAAM,EAAE,KAfhC,wBAAAnB,EAAAQ,SAAAZ,EAAA1C,SAAA,gBAAAuD,EAAAW,EAAAC,GAAA,OAAAR,EAAAH,MAAAxD,KAAAyD,YAAA,MAAAC,EAAA,GAAsBA,EAEJG,MAAa,CACvBO,WAAcA,EACdC,WAAcA,EACdC,UAAaA,EACbC,UAAaA,yFCFfC,GAAYC,aAAW,CACzBC,MAAO,CACHC,SAAU,OAKLC,GAAoC,SAAAC,GAA6B,IAA3BC,EAA2BD,EAA3BC,MAAOC,EAAoBF,EAApBE,KAChDC,GADoEH,EAAdI,SAC5CT,MAEhB,OACIU,EAAA1C,EAAA2C,cAAA,WACID,EAAA1C,EAAA2C,cAAA,UACKL,EAAMM,eAEXF,EAAA1C,EAAA2C,cAACE,GAAA,EAAD,CAAgBC,UAAWC,MACvBL,EAAA1C,EAAA2C,cAACK,GAAA,EAAD,CAAOC,UAAWT,EAAQN,MAAOgB,aAAW,gBACxCR,EAAA1C,EAAA2C,cAACQ,GAAA,EAAD,KACIT,EAAA1C,EAAA2C,cAACS,GAAA,EAAD,KACIV,EAAA1C,EAAA2C,cAACU,GAAA,EAAD,CAAWC,MAAM,SAAjB,UACAZ,EAAA1C,EAAA2C,cAACU,GAAA,EAAD,CAAWC,MAAM,SAAjB,YACAZ,EAAA1C,EAAA2C,cAACU,GAAA,EAAD,CAAWC,MAAM,SAAjB,YACAZ,EAAA1C,EAAA2C,cAACU,GAAA,EAAD,CAAWC,MAAM,SAAjB,WACAZ,EAAA1C,EAAA2C,cAACU,GAAA,EAAD,CAAWC,MAAM,SAAjB,YAGRZ,EAAA1C,EAAA2C,cAACY,GAAA,EAAD,KACKhB,EAAKiB,IAAI,SAACC,GAAD,OACNf,EAAA1C,EAAA2C,cAACS,GAAA,EAAD,CAAU3F,IAAKgG,EAAIC,QACfhB,EAAA1C,EAAA2C,cAACU,GAAA,EAAD,CAAWP,UAAU,KAAKa,MAAM,OAC3BF,EAAIC,QAEThB,EAAA1C,EAAA2C,cAACU,GAAA,EAAD,CAAWC,MAAM,SAASG,EAAIG,iBAAiBC,UAC/CnB,EAAA1C,EAAA2C,cAACU,GAAA,EAAD,CAAWC,MAAM,SAASG,EAAIG,iBAAiBE,UAC/CpB,EAAA1C,EAAA2C,cAACU,GAAA,EAAD,CAAWC,MAAM,SAASG,EAAIG,iBAAiBG,SAC/CrB,EAAA1C,EAAA2C,cAACU,GAAA,EAAD,CAAWC,MAAM,SAASG,EAAIO,OAAOC,UAAU,EAAE,cCvB3EpD,GAAO,CACTqD,OAAQ,CAAC,GAAI,IACbC,SAAU,IAGRC,GAAU,CACZC,OAAQ,CACJC,MAAO,CACH,CACIC,MAAO,CACHC,aAAa,OAM3BC,GAAU,CAAC,oBAAqB,iBAAkB,mBAAoB,mBAAoB,mBAAoB,sBAGvGC,GADZC,YACDC,EAAA,SAAAC,GACI,SAAAH,EAAYI,GAAY,IAAAC,EAAA,OAAAvG,OAAAC,EAAA,EAAAD,CAAAhB,KAAAkH,IACpBK,EAAAvG,OAAAwG,EAAA,EAAAxG,CAAAhB,KAAAgB,OAAAyG,EAAA,EAAAzG,CAAAkG,GAAAQ,KAAA1H,KAAMsH,KA8MVK,8BAAgC,SAACC,GAC7B9H,EAAU+H,qBAAqBD,EAAME,OAAO3G,QAhNxBoG,EAkNxBQ,+BAAiC,SAACH,GAC9B9H,EAAUkI,sBAAsBJ,EAAME,OAAO3G,QAjN7CoG,EAAKU,MAAQ,CACT7H,aAAc,GAAIC,cAAe,QACjC6H,yBAA0B,EAC1BC,yBAA0B,EAC1BC,wBAAyB,EACzBC,0BAA2B,EAC3BC,0BAA2B,EAC3BC,yBAA0B,EAC1BC,SAAS,EAETC,WAAW,EACXpF,KAAM,CACFqD,OAAQ,CAAC,GAAI,IACbC,SAAU,IAGd+B,UAAW,GACXC,UAAW,GACXC,iBAAkB,GAClBC,iBAAkB,GAClBC,iBAAkB,GAClBC,iBAAkB,IAEtBxB,EAAKyB,aAAezB,EAAKyB,aAAaC,KAAlBjI,OAAAkI,EAAA,EAAAlI,QAAAkI,EAAA,EAAAlI,CAAAuG,KACpBA,EAAK4B,YAAc5B,EAAK4B,YAAYF,KAAjBjI,OAAAkI,EAAA,EAAAlI,QAAAkI,EAAA,EAAAlI,CAAAuG,KA1BCA,EAD5B,OAAAvG,OAAAoI,EAAA,EAAApI,CAAAkG,EAAAG,GAAArG,OAAAE,EAAA,EAAAF,CAAAkG,EAAA,EAAAjH,IAAA,eAAAkB,MAAA,SAmDiB6C,GACTlE,EAAUuJ,kBAAkBrF,EAAKsF,UAAU9I,UAAWwD,EAAKsF,UAAU7I,WApD7E,CAAAR,IAAA,oBAAAkB,MAAA,SAuDsByG,GACd9H,EAAUyJ,gBAAgB3B,EAAME,OAAO3G,SAxD/C,CAAAlB,IAAA,qBAAAkB,MAAA,SA2DuByG,GACf9H,EAAU0J,iBAAiB5B,EAAME,OAAO3G,SA5DhD,CAAAlB,IAAA,cAAAkB,MAAA,eAAAsI,EAAAzI,OAAAsB,EAAA,EAAAtB,CAAAuB,EAAAC,EAAAC,KAAA,SAAAiH,IAAA,IAAAhD,EAAAiD,EAAAC,EAAApJ,EAAAC,EAAAoJ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAjK,KAAA,OAAAuC,EAAAC,EAAAK,KAAA,SAAAqH,GAAA,cAAAA,EAAAnH,KAAAmH,EAAAlH,MAAA,cAgEQhD,KAAKmK,SAAS,CACV3B,SAAS,EACTnF,KAAMA,GACNoF,WAAW,IAEX/B,EAAmB,GACnBiD,EAAW3J,KAAKI,aAAe,IAAMJ,KAAKM,kBAC1CsJ,EAAW5J,KAAKK,cAAgB,IAAML,KAAKO,mBAC3CC,EAAYV,EAAUsK,kBAAkB5J,UACxCC,EAAUX,EAAUsK,kBAAkB3J,QAzElDyJ,EAAAlH,KAAA,EA2EwCU,EAAa2G,iBAAiBV,EAAUnJ,EAAWC,GA3E3F,cA2EYoJ,EA3EZK,EAAA/G,KAAA+G,EAAAlH,KAAA,GA4EyCU,EAAa2G,iBAAiBT,EAAUpJ,EAAWC,GA5E5F,WA8EoC,OAFxBqJ,EA5EZI,EAAA/G,MAAA,CAAA+G,EAAAlH,KAAA,gBAAAkH,EAAA9G,OAAA,yBAiFY2G,EAAiCD,EAAqB9D,IAAI,SAACjC,GAC3D,MAAO,CACHuG,GAAIL,EAAK5J,cAAgB,IAAM0D,EAAKuG,GACpCC,SAAU,KACVzF,MAAOf,EAAKe,MACZ0F,KAAMzG,EAAKyC,OACXN,OAAQnC,EAAKmC,UAvF7BgE,EAAAnH,KAAA,GAAAmH,EAAAO,cAAAlI,EAAAC,EAAAC,KAAA,SAAAC,IAAA,IAAAgI,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAvC,EAAAC,EAAAuC,EAAAC,EAAAC,EAAAC,EAAA,OAAA9I,EAAAC,EAAAK,KAAA,SAAAyI,GAAA,cAAAA,EAAAvI,KAAAuI,EAAAtI,MAAA,OA4FY0H,EAAsC,GACtCC,EAAYY,KAAKC,MAAMzB,EAAc0B,OAAS,IA7F1Db,EAAArI,EAAAC,EAAAC,KAAA,SAAAmI,EA8FiBC,GA9FjB,IAAAa,EAAA,OAAAnJ,EAAAC,EAAAK,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cA+FgB0I,EAAa3B,EAAc9F,MAAU,GAAJ4G,EAAkB,IAATA,EAAI,IA/F9D/H,EAAAE,KAAA,EAgGgCZ,EAAauJ,iBAAiB,CAC9CC,UAAWF,IAjG3B,OAAA5I,EAAAK,KAmGoByI,UAAUC,QAAQ,SAAAC,GACtB,IAAI/H,EAAO2H,EAAWK,KAAK,SAAAC,GAAC,OAAIA,EAAE1B,IAAMwB,EAAExB,KACtCvG,GACA2G,EAAWuB,KAAK,CACZ3B,GAAIwB,EAAExB,GACN9D,OAAQzC,EAAKyG,KACbtE,OAAQnC,EAAKmC,OACbE,iBAAkB0F,EAAE1F,iBACpB8F,UAAWJ,EAAEI,cA3GrC,wBAAApJ,EAAAQ,SAAAsH,EAAA5K,QA8FiB6K,EAAI,EA9FrB,YA8FwBA,EAAIF,GA9F5B,CAAAW,EAAAtI,KAAA,eAAAsI,EAAAb,cAAAG,EA8FiBC,GA9FjB,eA8FuCA,IA9FvCS,EAAAtI,KAAA,kBAkHmC,MAAvB6G,EAlHZ,CAAAyB,EAAAtI,KAAA,gBAAAsI,EAAAlI,OAAA,UAAA+I,OAAA,YAqHYrB,EAAkCjB,EAAoB7D,IAAI,SAACjC,GAC3D,MAAO,CACHuG,GAAIL,EAAK7J,aAAe,IAAM2D,EAAKuG,GACnCC,SAAU,KACVzF,MAAOf,EAAKe,MACZ0F,KAAMzG,EAAKyC,OACXN,OAAQnC,EAAKmC,UAGjB6E,EAAaQ,KAAKC,MAAMV,EAAeW,OAAS,IAEhDT,EAAsC,GAhIlDC,EAAA1I,EAAAC,EAAAC,KAAA,SAAAwI,EAkIiBJ,GAlIjB,IAAAa,EAAA,OAAAnJ,EAAAC,EAAAK,KAAA,SAAAuJ,GAAA,cAAAA,EAAArJ,KAAAqJ,EAAApJ,MAAA,cAmIgB0I,EAAaZ,EAAe7G,MAAU,GAAJ4G,EAAkB,IAATA,EAAI,IAnI/DuB,EAAApJ,KAAA,EAoIgCZ,EAAauJ,iBAAiB,CAC9CC,UAAWF,IArI3B,OAAAU,EAAAjJ,KAuIoByI,UAAUC,QAAQ,SAAAC,GACtB,IAAI/H,EAAO2H,EAAWK,KAAK,SAAAC,GAAC,OAAIF,EAAExB,IAAM0B,EAAE1B,KACtCvG,GACAiH,EAAWiB,KAAK,CACZ3B,GAAIwB,EAAExB,GACN9D,OAAQzC,EAAKyG,KACbtE,OAAQnC,EAAKmC,OACbE,iBAAkB0F,EAAE1F,iBACpB8F,UAAWJ,EAAEI,cA/IrC,wBAAAE,EAAA9I,SAAA2H,EAAAjL,QAkIiB6K,EAAI,EAlIrB,aAkIwBA,EAAIE,GAlI5B,CAAAO,EAAAtI,KAAA,gBAAAsI,EAAAb,cAAAQ,EAkIiBJ,GAlIjB,iBAkIwCA,IAlIxCS,EAAAtI,KAAA,iBAsJQgI,EAAWa,QAAQ,SAAC9H,GACX2C,EAAO2F,SAAStI,EAAKmI,YACtBxF,EAAOuF,KAAKlI,EAAKmI,aAIzBxF,EAAOmF,QAAQ,SAAC9H,EAAMuI,GAClBjJ,GAAKsD,SAASsF,KAAK,CACfM,MAAOxI,EACPyI,gBAAiBvF,GAAQqF,GACzBG,YAAaxF,GAAQqF,GACrBjJ,KAAM,CAAC2H,EAAWlH,OAAO,SAAAgI,GAAC,OAAIA,EAAEI,WAAanI,IAAM0H,OAAQf,EAAW5G,OAAO,SAAAgI,GAAC,OAAIA,EAAEI,WAAanI,IAAM0H,YAG3G/C,EAAYsC,EAAWlH,OAAO,SAACC,GAC/B,OAAuB,GAAfA,EAAKmC,QAAenC,EAAKqC,iBAAiBE,SAAW,IAAwB,GAAfvC,EAAKmC,QAAenC,EAAKqC,iBAAiBC,SAAW,KAE3HsC,EAAY+B,EAAW5G,OAAO,SAACC,GAC/B,OAAuB,GAAfA,EAAKmC,QAAenC,EAAKqC,iBAAiBE,SAAW,IAAwB,GAAfvC,EAAKmC,QAAenC,EAAKqC,iBAAiBC,SAAW,KAE3H6E,EAAoBF,EAAW0B,KAAK,SAAClK,EAAGmK,GAAJ,OACpCA,EAAEvG,iBAAiBC,SAAS7D,EAAE4D,iBAAiBC,WAAUpC,MAAM,EAAE,GACjEkH,EAAoBT,EAAWgC,KAAK,SAAClK,EAAGmK,GAAJ,OACpCA,EAAEvG,iBAAiBC,SAAS7D,EAAE4D,iBAAiBC,WAAUpC,MAAM,EAAE,GACjEmH,EAAoBJ,EAAW0B,KAAK,SAAClK,EAAGmK,GAAJ,OACpCA,EAAEvG,iBAAiBE,SAAS9D,EAAE4D,iBAAiBE,WAAUrC,MAAM,EAAE,GACjEoH,EAAoBX,EAAWgC,KAAK,SAAClK,EAAGmK,GAAJ,OACpCA,EAAEvG,iBAAiBE,SAAS9D,EAAE4D,iBAAiBE,WAAUrC,MAAM,EAAE,GACrEgG,EAAKE,SAAS,CACV3B,SAAS,EACTC,WAAW,EACXP,yBAA0B8C,EAAWhF,IAAI,SAAA4G,GAAC,OAAIA,EAAExG,iBAAiBE,WAAUuG,OAAO,SAACrK,EAAGmK,GAAJ,OAAUnK,EAAImK,GAAG,GAAK3B,EAAWS,OACnHtD,yBAA0B6C,EAAWhF,IAAI,SAAA4G,GAAC,OAAIA,EAAExG,iBAAiBC,WAAUwG,OAAO,SAACrK,EAAGmK,GAAJ,OAAUnK,EAAImK,GAAG,GAAK3B,EAAWS,OACnHrD,wBAAyB4C,EAAWhF,IAAI,SAAA4G,GAAC,OAAIA,EAAExG,iBAAiBG,UAASsG,OAAO,SAACrK,EAAGmK,GAAJ,OAAUnK,EAAImK,GAAG,GAAK3B,EAAWS,OACjHnD,0BAA2BoC,EAAW1E,IAAI,SAAA4G,GAAC,OAAIA,EAAExG,iBAAiBE,WAAUuG,OAAO,SAACrK,EAAGmK,GAAJ,OAAUnK,EAAImK,GAAG,GAAKjC,EAAWe,OACpHpD,0BAA2BqC,EAAW1E,IAAI,SAAA4G,GAAC,OAAIA,EAAExG,iBAAiBC,WAAUwG,OAAO,SAACrK,EAAGmK,GAAJ,OAAUnK,EAAImK,GAAG,GAAKjC,EAAWe,OACpHlD,yBAA0BmC,EAAW1E,IAAI,SAAA4G,GAAC,OAAIA,EAAExG,iBAAiBG,UAASsG,OAAO,SAACrK,EAAGmK,GAAJ,OAAUnK,EAAImK,GAAG,GAAKjC,EAAWe,OAClHpI,KAAM,CACFqD,OAAQ,CAAC5G,EAAUgN,gBAAgB1H,cAAetF,EAAUiN,iBAAiB3H,eAC7EuB,SAAUtD,GAAKsD,UAEnB+B,UAAWA,EACXC,UAAWA,EACXG,iBAAkBoC,EAClBnC,iBAAkBoC,EAClBvC,iBAAiBwC,EACjBvC,iBAAiBwC,IApM7B,yBAAAC,EAAAhI,SAAAZ,EAAA1C,OAAAuC,GAAA,sCAAAyH,EAAAE,EAAA8C,IAAA,CAAA9C,EAAAlH,KAAA,gBAAAkH,EAAA9G,OAAA,SAAA4G,EAAAmC,GAAA,QAAAjC,EAAAlH,KAAA,iBAAAkH,EAAAnH,KAAA,GAAAmH,EAAA+C,GAAA/C,EAAA,UAuMYgD,MAAKhD,EAAA+C,IAvMjB,yBAAA/C,EAAA5G,SAAAoG,EAAA1J,KAAA,uCAAAyJ,EAAAjG,MAAAxD,KAAAyD,YAAA,KAAAxD,IAAA,oBAAAkB,MAAA,eAAAgM,EAAAnM,OAAAsB,EAAA,EAAAtB,CAAAuB,EAAAC,EAAAC,KAAA,SAAA2K,IAAA,OAAA7K,EAAAC,EAAAK,KAAA,SAAAwK,GAAA,cAAAA,EAAAtK,KAAAsK,EAAArK,MAAA,wBAAAqK,EAAA/J,SAAA8J,EAAApN,SAAA,yBAAAmN,EAAA3J,MAAAxD,KAAAyD,YAAA,KAAAxD,IAAA,SAAAkB,MAAA,WAuNa,IAAAmM,EACsBtN,KAAKiI,MAA3BO,EADA8E,EACA9E,QAASC,EADT6E,EACS7E,UAYd,OACIvD,EAAA1C,EAAA2C,cAAA,OAAKM,UAAW8H,IAAOC,WACnBtI,EAAA1C,EAAA2C,cAAA,gCACAD,EAAA1C,EAAA2C,cAAA,WACAD,EAAA1C,EAAA2C,cAAA,OAAKsI,MAAO,CAACC,QAAS,OAAQC,eAAgB,iBAC1CzI,EAAA1C,EAAA2C,cAAA,OAAKsI,MAAO,CAACC,QAAS,OAAQE,cAAe,WACzC1I,EAAA1C,EAAA2C,cAAA,OAAKsI,MAAO,CAACC,QAAS,OAAQE,cAAe,MAAOD,eAAgB,iBAChEzI,EAAA1C,EAAA2C,cAAA,OAAKsI,MAAO,CAACC,QAAS,OAAQE,cAAe,QACzC1I,EAAA1C,EAAA2C,cAAA,OAAKsI,MAAO,CAACC,QAAS,OAAQE,cAAe,WACzC1I,EAAA1C,EAAA2C,cAAC0I,EAAA,EAAD,CAAaJ,MAAO,CAAC9I,SAAU,IAAKmJ,OAAQ,KACxC5I,EAAA1C,EAAA2C,cAAC4I,EAAA,EAAD,CAAYC,QAAM,EAAC1D,GAAG,8CAAtB,aAEApF,EAAA1C,EAAA2C,cAAC8I,EAAA,EAAD,CACI1B,MAAO,gBACPjC,GAAG,qBACHnJ,MAAOnB,KAAKI,aACZ8N,SAAUlO,KAAKmO,mBAEfjJ,EAAA1C,EAAA2C,cAACiJ,EAAA,EAAD,CAAUjN,MAAO,WAAjB,WACA+D,EAAA1C,EAAA2C,cAACiJ,EAAA,EAAD,CAAUjN,MAAO,UAAjB,YAGR+D,EAAA1C,EAAA2C,cAAC0I,EAAA,EAAD,CAAaJ,MAAO,CAAC9I,SAAU,IAAKmJ,OAAQ,KACxC5I,EAAA1C,EAAA2C,cAAC4I,EAAA,EAAD,CAAYC,QAAM,EAAC1D,GAAG,8CAAtB,aAGApF,EAAA1C,EAAA2C,cAAC8I,EAAA,EAAD,CACI3D,GAAG,qBACHiC,MAAO,iBACPpL,MAAOnB,KAAKK,cACZ6N,SAAUlO,KAAKqO,oBAEfnJ,EAAA1C,EAAA2C,cAACiJ,EAAA,EAAD,CAAUjN,MAAO,WAAjB,WACA+D,EAAA1C,EAAA2C,cAACiJ,EAAA,EAAD,CAAUjN,MAAO,UAAjB,aAIZ+D,EAAA1C,EAAA2C,cAAA,OAAKsI,MAAO,CAACC,QAAS,OAAQE,cAAe,WACzC1I,EAAA1C,EAAA2C,cAAC0I,EAAA,EAAD,CAAaJ,MAAO,CAAC9I,SAAU,IAAKmJ,OAAQ,KACxC5I,EAAA1C,EAAA2C,cAAC4I,EAAA,EAAD,CAAYC,QAAM,EAAC1D,GAAG,8CAAtB,aAGApF,EAAA1C,EAAA2C,cAAC8I,EAAA,EAAD,CACI1B,MAAO,UACPjC,GAAG,qBACHnJ,MAAOnB,KAAKM,kBACZ4N,SAAUlO,KAAK2H,+BAEfzC,EAAA1C,EAAA2C,cAACiJ,EAAA,EAAD,CAAUjN,MAAO,MAAjB,kBACA+D,EAAA1C,EAAA2C,cAACiJ,EAAA,EAAD,CAAUjN,MAAO,MAAjB,mBAGR+D,EAAA1C,EAAA2C,cAAC0I,EAAA,EAAD,CAAaJ,MAAO,CAAC9I,SAAU,IAAKmJ,OAAQ,KACxC5I,EAAA1C,EAAA2C,cAAC4I,EAAA,EAAD,CAAYC,QAAM,EAAC1D,GAAG,8CAAtB,aAGApF,EAAA1C,EAAA2C,cAAC8I,EAAA,EAAD,CACI1B,MAAO,UACPjC,GAAG,qBACHnJ,MAAOnB,KAAKO,mBACZ2N,SAAUlO,KAAK+H,gCAEf7C,EAAA1C,EAAA2C,cAACiJ,EAAA,EAAD,CAAUjN,MAAO,MAAjB,kBACA+D,EAAA1C,EAAA2C,cAACiJ,EAAA,EAAD,CAAUjN,MAAO,MAAjB,qBAKhB+D,EAAA1C,EAAA2C,cAACmJ,EAAA,UAAD,CACIC,OAAQ,CAACvO,KAAKoK,mBACdoE,oBAAoB,EACpBC,2BAA2B,EAC3BP,SAAUlO,KAAKgJ,gBAGvB9D,EAAA1C,EAAA2C,cAACuJ,EAAA,EAAD,CAAQC,QAAQ,YAAYC,QAAS5O,KAAKmJ,YAAa0F,MAAM,WAA7D,OACA3J,EAAA1C,EAAA2C,cAAC2J,EAAA,EAAD,CAAKzL,KAAMrD,KAAKiI,MAAM5E,KAAMuD,QAASA,GAASmI,KAAM,QACpD7J,EAAA1C,EAAA2C,cAAA,OAAKsI,MAAO,CAACC,QAAS,OAAQE,cAAe,WACzC1I,EAAA1C,EAAA2C,cAAA,uCACAD,EAAA1C,EAAA2C,cAAA,OAAKsI,MAAO,CAACC,QAAS,OAAQE,cAAe,QACzC1I,EAAA1C,EAAA2C,cAAA,WACID,EAAA1C,EAAA2C,cAAA,UAAKnF,KAAKI,cACV8E,EAAA1C,EAAA2C,cAAA,UACID,EAAA1C,EAAA2C,cAAA,sBAAcnF,KAAKiI,MAAME,yBAAyB6G,QAAQ,IAE1D9J,EAAA1C,EAAA2C,cAAA,sBAAcnF,KAAKiI,MAAMC,yBAAyB8G,QAAQ,IAC1D9J,EAAA1C,EAAA2C,cAAA,qBAAanF,KAAKiI,MAAMG,wBAAwB4G,QAAQ,MAGhE9J,EAAA1C,EAAA2C,cAAA,WACID,EAAA1C,EAAA2C,cAAA,UAAKnF,KAAKK,eACV6E,EAAA1C,EAAA2C,cAAA,UACID,EAAA1C,EAAA2C,cAAA,sBAAcnF,KAAKiI,MAAMI,0BAA0B2G,QAAQ,IAE3D9J,EAAA1C,EAAA2C,cAAA,sBAAcnF,KAAKiI,MAAMK,0BAA0B0G,QAAQ,IAC3D9J,EAAA1C,EAAA2C,cAAA,qBAAanF,KAAKiI,MAAMM,yBAAyByG,QAAQ,QAQzE9J,EAAA1C,EAAA2C,cAAA,YAEJD,EAAA1C,EAAA2C,cAAA,OAAKsI,MAAO,CAACC,QAAS,OAAQuB,MAAO,MAAOrB,cAAe,WAEvD1I,EAAA1C,EAAA2C,cAAC+J,GAAD,CAAWpK,MAAO,2BAA4B9E,KAAKI,aAAagF,cAAeL,KAAM/E,KAAKiI,MAAMS,UAAU5E,OAAO,SAAAgI,GAAC,OAAgB,GAAZA,EAAE5F,SAAajC,MAAM,EAAE,KAC7IiB,EAAA1C,EAAA2C,cAAC+J,GAAD,CAAWpK,MAAO,4BAA6B9E,KAAKI,aAAagF,cAAgBL,KAAM/E,KAAKiI,MAAMS,UAAU5E,OAAO,SAAAgI,GAAC,OAAgB,GAAZA,EAAE5F,SAAajC,MAAM,EAAE,KAC/IiB,EAAA1C,EAAA2C,cAAC+J,GAAD,CAAWpK,MAAO,4BAA6B9E,KAAKK,cAAc+E,cAAeL,KAAM/E,KAAKiI,MAAMU,UAAU7E,OAAO,SAAAgI,GAAC,OAAgB,GAAZA,EAAE5F,SAAajC,MAAM,EAAE,KAC/IiB,EAAA1C,EAAA2C,cAAC+J,GAAD,CAAWpK,MAAO,4BAA6B9E,KAAKK,cAAc+E,cAAeL,KAAM/E,KAAKiI,MAAMU,UAAU7E,OAAO,SAAAgI,GAAC,OAAgB,GAAZA,EAAE5F,SAAajC,MAAM,EAAE,KAC/IiB,EAAA1C,EAAA2C,cAAA,WACAD,EAAA1C,EAAA2C,cAAC+J,GAAD,CAAWpK,MAAO,sBAAuB9E,KAAKI,aAAagF,cAAeL,KAAM/E,KAAKiI,MAAMa,mBAC3F5D,EAAA1C,EAAA2C,cAAC+J,GAAD,CAAWpK,MAAO,sBAAuB9E,KAAKI,aAAagF,cAAgBL,KAAM/E,KAAKiI,MAAMW,mBAC5F1D,EAAA1C,EAAA2C,cAAC+J,GAAD,CAAWpK,MAAO,sBAAuB9E,KAAKK,cAAc+E,cAAeL,KAAM/E,KAAKiI,MAAMc,mBAC5F7D,EAAA1C,EAAA2C,cAAC+J,GAAD,CAAWpK,MAAO,sBAAuB9E,KAAKK,cAAc+E,cAAeL,KAAM/E,KAAKiI,MAAMY,oBA5HnGL,GAAWC,EAERvD,EAAA1C,EAAA2C,cAACgK,EAAA,qBAAD,WAGJ,OAhOhB,CAAAlP,IAAA,eAAAmP,IAAA,WAgCQ,OAAOtP,EAAUM,eAhCzB,CAAAH,IAAA,gBAAAmP,IAAA,WAoCQ,OAAOtP,EAAUO,gBApCzB,CAAAJ,IAAA,oBAAAmP,IAAA,WAwCQ,OAAOtP,EAAUuP,uBAxCzB,CAAApP,IAAA,qBAAAmP,IAAA,WA4CQ,OAAOtP,EAAUwP,wBA5CzB,CAAArP,IAAA,oBAAAmP,IAAA,WAgDQ,OAAOtP,EAAUsK,sBAhDzBlD,EAAA,CAA0BqI,IAAMC,aAAhCpI,sBCnCMqI,GAAM,WAEV,OACEvK,EAAA1C,EAAA2C,cAAA,OAAKsI,MAAO,CAAEiC,OAAQ,OAAQT,MAAO,SACnC/J,EAAA1C,EAAA2C,cAACwK,GAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAKvK,UAAW4B,GAAMjH,IAAI,WAIlD6P,IAASC,OACP7K,EAAA1C,EAAA2C,cAAC6K,GAAA,EAAD,KACE9K,EAAA1C,EAAA2C,cAAC8K,GAAD,OAEFC,SAASC,eAAe,SR+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.00140b3a.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","export enum SourceEnum {\n    rapidApi = 1,\n    azure = 2\n}","import {action, computed, observable} from \"mobx\";\n\n//import { toJS } from \"mobx\";\nclass MainStore {\n\n    @observable firstProductReview: any = [];\n    @observable secondProductReview: any = [];\n    @observable reviews: any = [];\n    @observable loading: boolean = false;\n    @observable firstProductId: string = \"\";\n    @observable secondProductId: string = \"\";\n    @observable firstProduct: string = \"alibaba\";\n    @observable secondProduct: string = \"amazon\";\n    @observable firstActiveRegion: string = \"uk\";\n    @observable secondActiveRegion: string = \"us\";\n    @observable selectionRange: any = {\n        startDate: new Date(\"01/01/2018\"),\n        endDate: new Date(),\n        key: 'selection',\n    }\n\n    @computed\n    get getReviews() {\n        return this.reviews\n    }\n\n    @computed\n    get getFirstProduct() {\n        return this.firstProduct;\n    }\n    @computed\n    get getFirstActiveRegion() {\n        return this.firstActiveRegion;\n    }\n    @computed\n    get getSecondActiveRegion() {\n        return this.secondActiveRegion;\n    }\n\n    @computed\n    get getSecondProduct() {\n        return this.secondProduct;\n    }\n    @computed\n    get getSelectionRange() {\n        return this.selectionRange;\n    }\n\n    @action\n    setFirstProductReviews(reviews: any) {\n        this.reviews = reviews;\n    }\n\n    @action\n    setSecondProductReviews(reviews: any) {\n        this.reviews = reviews;\n    }\n\n    @action\n    setFirstProductId(key: string) {\n        this.firstProductId = key\n    }\n\n    @action\n    setSecondProductId(key: string) {\n        this.secondProductId = key\n    }\n\n    @action\n    setFirstProduct(key: string) {\n        this.firstProduct = key\n    }\n\n    @action\n    setSecondProduct(key: string) {\n        this.secondProduct = key\n    }\n\n    @action\n    setFirstActiveRegion(key: string) {\n        this.firstActiveRegion = key\n    }\n    @action\n    setSecondActiveRegion(key: string) {\n        this.secondActiveRegion = key\n    }\n    @action\n    setSelectionRange(startDate: any,endDate:any) {\n        this.selectionRange.startDate = startDate;\n        this.selectionRange.endDate = endDate\n    }\n\n\n}\n\nconst mainStore = new MainStore();\nexport default mainStore;\n","import axios, {AxiosInstance} from 'axios';\nimport {SourceEnum} from \"./source.enum\";\n\nexport abstract class BaseService {\n    static rapidApiInstance?: AxiosInstance = undefined\n    static azureInstance?: AxiosInstance = undefined;\n\n    static rapidApi() {\n        return axios.create({\n            baseURL: 'https://app-stores.p.rapidapi.com',\n            timeout: 10000,\n            headers: {\n                'x-rapidapi-key': 'b2f817b3d4msh51085edfd7896f5p146ee0jsnf6cffe263c32',\n                'x-rapidapi-host': 'app-stores.p.rapidapi.com',\n            }\n        })\n    }\n\n    static azure() {\n        return axios.create({\n            baseURL: 'https://cgservices.cognitiveservices.azure.com/text/analytics/v3.0/sentiment',\n            timeout: 10000,\n            headers: {\n                'Ocp-Apim-Subscription-Key': '7521b416ec6d47148f1ddbf6429d28af',\n                'Content-Type': 'application/json',\n                'Accept':'application/json'\n            }\n        })\n    }\n\n    static getInstance(source: SourceEnum) {\n        if (source == SourceEnum.rapidApi) {\n            if (this.rapidApiInstance === undefined) {\n               this.rapidApiInstance =  this.rapidApi()\n                return this.rapidApiInstance\n            }else{\n                return this.rapidApiInstance;\n            }\n        } else{\n            if (this.azureInstance === undefined) {\n                this.azureInstance = this.azure()\n                return this.azureInstance;\n            }else{\n                return this.azureInstance;\n            }\n        }\n    }\n}\n\n","import {BaseService} from \"./base/base.service\";\nimport {SourceEnum} from \"./base/source.enum\";\nimport {SentimentRequestModel} from \"../interface/azure/sentiment.request.interface\";\n\nexport abstract class AzureService {\n\n    static async sentimentRequest(request:SentimentRequestModel) {\n        const response:any = await BaseService.getInstance(SourceEnum.azure)!.post(\n            \"\",request)\n        return response.data;\n    }\n}\n","import alibaba_uk from \"./../db/alibaba_uk.json\"\nimport alibaba_us from \"./../db/alibaba_us.json\"\nimport amazon_us from \"./../db/amazon_us.json\"\nimport amazon_uk from \"./../db/amazon_uk.json\"\nimport {LocalModel} from \"../interface/local/local.interface\";\n\nexport abstract class LocalService {\n\n    public static local: any = {\n        \"alibaba_uk\": alibaba_uk,\n        \"alibaba_us\": alibaba_us,\n        \"amazon_uk\": amazon_uk,\n        \"amazon_us\": amazon_us\n    }\n\n    static async getDataFromLocal(source: string, startDate: any, endDate: any) {\n        let data = this.local[source] as LocalModel[]\n\n        let filtered =  data.filter((item)=>{\n            return new Date(item.date) >= new Date(startDate) && new Date(item.date) <= new Date(endDate)\n        })\n        return filtered.slice(0,50)\n\n    }\n}\n","import React, {FunctionComponent} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nconst useStyles = makeStyles({\n    table: {\n        minWidth: 650,\n    },\n});\n\n\nexport const TableList: FunctionComponent<any> = ({title, rows, children}) => {\n    const classes = useStyles();\n\n    return (\n        <div>\n            <h6>\n                {title.toUpperCase()}\n            </h6>\n            <TableContainer component={Paper}>\n                <Table className={classes.table} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell align=\"right\">Rating</TableCell>\n                            <TableCell align=\"right\">Positive</TableCell>\n                            <TableCell align=\"right\">Negative</TableCell>\n                            <TableCell align=\"right\">Neutral</TableCell>\n                            <TableCell align=\"right\">Review</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {rows.map((row) => (\n                            <TableRow key={row.rating}>\n                                <TableCell component=\"th\" scope=\"row\">\n                                    {row.rating}\n                                </TableCell>\n                                <TableCell align=\"right\">{row.confidenceScores.positive}</TableCell>\n                                <TableCell align=\"right\">{row.confidenceScores.negative}</TableCell>\n                                <TableCell align=\"right\">{row.confidenceScores.neutral}</TableCell>\n                                <TableCell align=\"right\">{row.review.substring(0,100)}</TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n        </div>\n\n    );\n}\n","import React from \"react\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport styles from \"./style.module.css\";\nimport {observer} from \"mobx-react\";\nimport {Button} from \"@material-ui/core\";\nimport mainStore from \"../../stores\";\nimport {IHomeState} from \"./IHomeState\";\nimport {DocumentModel, DocumentResponseModel} from \"../../interface/azure/sentiment.request.interface\";\nimport {AzureService} from \"../../services/azure.service\";\nimport MenuItem from '@material-ui/core/MenuItem';\nimport {Bar} from 'react-chartjs-2';\nimport {CircleToBlockLoading} from 'react-loadingg';\nimport 'react-date-range/dist/styles.css'; // main style file\nimport 'react-date-range/dist/theme/default.css'; // theme css file\nimport Select from '@material-ui/core/Select';\nimport {DateRange} from 'react-date-range';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport {LocalService} from \"../../services/db.service\";\nimport {LocalModel} from \"../../interface/local/local.interface\";\nimport {TableList} from \"../../components/table\";\n\nconst data = {\n    labels: ['', ''],\n    datasets: [],\n} as any;\n\nconst options = {\n    scales: {\n        yAxes: [\n            {\n                ticks: {\n                    beginAtZero: true,\n                },\n            },\n        ],\n    },\n};\nconst bgColor = ['rgb(255, 99, 132)', 'rgb(0, 255, 0)', 'rgb(128, 255, 0)', 'rgb(0, 255, 255)', 'rgb(255, 255, 0)', 'rgb(255, 255, 128)']\n\n@observer\nexport class Home extends React.Component<{}, IHomeState> {\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            firstProduct: \"\", secondProduct: \"false\",\n            firstNegativeProductMean: 0,\n            firstPositiveProductMean: 0,\n            firstNeutralProductMean: 0,\n            secondPositiveProductMean: 0,\n            secondNegativeProductMean: 0,\n            secondNeutralProductMean: 0,\n            isReady: false,\n\n            isLoading: false,\n            data: {\n                labels: [\"\", \"\"],\n                datasets: [],\n\n            },\n            outliers1: [] as DocumentResponseModel[],\n            outliers2: [] as DocumentResponseModel[],\n            extremeNegative1: [] as DocumentResponseModel[],\n            extremeNegative2: [] as DocumentResponseModel[],\n            extremePositive1: [] as DocumentResponseModel[],\n            extremePositive2: [] as DocumentResponseModel[],\n        };\n        this.handleSelect = this.handleSelect.bind(this)\n        this.getKeywords = this.getKeywords.bind(this);\n\n    }\n\n    get firstProduct() {\n        return mainStore.firstProduct;\n    }\n\n    get secondProduct() {\n        return mainStore.secondProduct;\n    }\n\n    get firstActiveRegion() {\n        return mainStore.getFirstActiveRegion\n    }\n\n    get secondActiveRegion() {\n        return mainStore.getSecondActiveRegion\n    }\n\n    get getSelectionRange() {\n        return mainStore.getSelectionRange\n    }\n\n    handleSelect(date: any) {\n        mainStore.setSelectionRange(date.selection.startDate, date.selection.endDate)\n    }\n\n    handleChangeFirst(event: any) {\n        mainStore.setFirstProduct(event.target.value as any)\n    }\n\n    handleChangeSecond(event: any) {\n        mainStore.setSecondProduct(event.target.value as any)\n    }\n\n    async getKeywords() {\n        this.setState({\n            isReady: false,\n            data: data,\n            isLoading: true,\n        })\n        let labels: string[] = []\n        let keyword1 = this.firstProduct + \"_\" + this.firstActiveRegion\n        let keyword2 = this.secondProduct + \"_\" + this.secondActiveRegion;\n        let startDate = mainStore.getSelectionRange.startDate\n        let endDate = mainStore.getSelectionRange.endDate\n\n        let firstProductReviews = await LocalService.getDataFromLocal(keyword1, startDate, endDate)\n        let secondProductReviews = await LocalService.getDataFromLocal(keyword2, startDate, endDate)\n\n        if (secondProductReviews == null) {\n            return\n        }\n        let documentModel: DocumentModel[] = secondProductReviews.map((item: LocalModel) => {\n            return {\n                id: this.secondProduct + \"_\" + item.id,\n                language: \"en\",\n                title: item.title,\n                text: item.review,\n                rating: item.rating\n            } as DocumentModel\n        })\n        try{\n\n        let graphData2: DocumentResponseModel[] = []\n        let loopCount = Math.floor(documentModel.length / 10)\n        for (let i = 0; i < loopCount; i++) {\n            let slicedData = documentModel.slice(i * 10, (i + 1) * 10);\n            let result2 = await AzureService.sentimentRequest({\n                documents: slicedData\n            })\n            result2.documents.forEach(k => {\n                let item = slicedData.find(z => z.id == k.id)\n                if (item) {\n                    graphData2.push({\n                        id: k.id,\n                        review: item.text,\n                        rating: item.rating,\n                        confidenceScores: k.confidenceScores,\n                        sentiment: k.sentiment\n                    })\n                }\n\n            })\n        }\n\n        if (firstProductReviews == null) {\n            return;\n        }\n        let documentModel2: DocumentModel[] = firstProductReviews.map((item: LocalModel) => {\n            return {\n                id: this.firstProduct + \"_\" + item.id,\n                language: \"en\",\n                title: item.title,\n                text: item.review,\n                rating: item.rating,\n            } as DocumentModel\n        })\n        let loopCount2 = Math.floor(documentModel2.length / 10)\n\n        let graphData1: DocumentResponseModel[] = [];\n\n        for (let i = 0; i < loopCount2; i++) {\n            let slicedData = documentModel2.slice(i * 10, (i + 1) * 10);\n            let result1 = await AzureService.sentimentRequest({\n                documents: slicedData\n            })\n            result1.documents.forEach(k => {\n                let item = slicedData.find(z => k.id == z.id);\n                if (item) {\n                    graphData1.push({\n                        id: k.id,\n                        review: item.text as any,\n                        rating: item.rating as any,\n                        confidenceScores: k.confidenceScores,\n                        sentiment: k.sentiment\n                    })\n                }\n\n            })\n        }\n\n        graphData1.forEach((item: DocumentResponseModel) => {\n            if (!labels.includes(item.sentiment)) {\n                labels.push(item.sentiment)\n            }\n        })\n\n        labels.forEach((item, index) => {\n            data.datasets.push({\n                label: item,\n                backgroundColor: bgColor[index],\n                borderColor: bgColor[index],\n                data: [graphData1.filter(k => k.sentiment == item).length, graphData2.filter(k => k.sentiment == item).length] as number[],\n            })\n        })\n        let outliers1 = graphData1.filter((item) => {\n            return (item.rating == 5 && item.confidenceScores.negative > 0.7) || (item.rating == 1 && item.confidenceScores.positive > 0.7)\n        })\n        let outliers2 = graphData2.filter((item) => {\n            return (item.rating == 5 && item.confidenceScores.negative > 0.7) || (item.rating == 1 && item.confidenceScores.positive > 0.7)\n        })\n        let extremesPositive1 = graphData1.sort((a, b) =>\n            b.confidenceScores.positive-a.confidenceScores.positive).slice(0,5)\n        let extremesPositive2 = graphData2.sort((a, b) =>\n            b.confidenceScores.positive-a.confidenceScores.positive).slice(0,5)\n        let extremesNegative1 = graphData1.sort((a, b) =>\n            b.confidenceScores.negative-a.confidenceScores.negative).slice(0,5)\n        let extremesNegative2 = graphData2.sort((a, b) =>\n            b.confidenceScores.negative-a.confidenceScores.negative).slice(0,5)\n        this.setState({\n            isReady: true,\n            isLoading: false,\n            firstNegativeProductMean: graphData1.map(l => l.confidenceScores.negative).reduce((a, b) => a + b, 0) / graphData1.length,\n            firstPositiveProductMean: graphData1.map(l => l.confidenceScores.positive).reduce((a, b) => a + b, 0) / graphData1.length,\n            firstNeutralProductMean: graphData1.map(l => l.confidenceScores.neutral).reduce((a, b) => a + b, 0) / graphData1.length,\n            secondNegativeProductMean: graphData2.map(l => l.confidenceScores.negative).reduce((a, b) => a + b, 0) / graphData2.length,\n            secondPositiveProductMean: graphData2.map(l => l.confidenceScores.positive).reduce((a, b) => a + b, 0) / graphData2.length,\n            secondNeutralProductMean: graphData2.map(l => l.confidenceScores.neutral).reduce((a, b) => a + b, 0) / graphData2.length,\n            data: {\n                labels: [mainStore.getFirstProduct.toUpperCase(), mainStore.getSecondProduct.toUpperCase()],\n                datasets: data.datasets\n            },\n            outliers1: outliers1,\n            outliers2: outliers2,\n            extremePositive1: extremesPositive1,\n            extremePositive2: extremesPositive2,\n            extremeNegative1:extremesNegative1,\n            extremeNegative2:extremesNegative2\n        })\n        }catch (e) {\n            alert(e)\n        }\n\n    }\n\n    async componentDidMount() {\n\n    }\n\n    handleChangeFirstActiveRegion = (event) => {\n        mainStore.setFirstActiveRegion(event.target.value);\n    };\n    handleChangeSecondActiveRegion = (event) => {\n        mainStore.setSecondActiveRegion(event.target.value);\n    };\n\n    render() {\n        let {isReady, isLoading} = this.state;\n\n        const renderLoading = () => {\n            if (!isReady && isLoading) {\n                return (\n                    <CircleToBlockLoading/>\n                )\n            } else {\n                return\n            }\n\n        }\n        return (\n            <div className={styles.container}>\n                <h1>Sentiment Analysis</h1>\n                <br/>\n                <div style={{display: \"flex\", justifyContent: \"space-evenly\"}}>\n                    <div style={{display: \"flex\", flexDirection: \"column\",}}>\n                        <div style={{display: \"flex\", flexDirection: \"row\", justifyContent: \"space-evenly\"}}>\n                            <div style={{display: \"flex\", flexDirection: \"row\"}}>\n                                <div style={{display: \"flex\", flexDirection: \"column\"}}>\n                                    <FormControl style={{minWidth: 120, margin: 10}}>\n                                        <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">1.Product\n                                        </InputLabel>\n                                        <Select\n                                            label={\"First Product\"}\n                                            id=\"demo-simple-select\"\n                                            value={this.firstProduct}\n                                            onChange={this.handleChangeFirst}\n                                        >\n                                            <MenuItem value={'alibaba'}>Alibaba</MenuItem>\n                                            <MenuItem value={'amazon'}>Amazon</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                    <FormControl style={{minWidth: 120, margin: 10}}>\n                                        <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n                                            2.Product\n                                        </InputLabel>\n                                        <Select\n                                            id=\"demo-simple-select\"\n                                            label={\"Second Product\"}\n                                            value={this.secondProduct}\n                                            onChange={this.handleChangeSecond}\n                                        >\n                                            <MenuItem value={'alibaba'}>Alibaba</MenuItem>\n                                            <MenuItem value={'amazon'}>Amazon</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </div>\n                                <div style={{display: \"flex\", flexDirection: \"column\"}}>\n                                    <FormControl style={{minWidth: 120, margin: 10}}>\n                                        <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n                                            1.Country\n                                        </InputLabel>\n                                        <Select\n                                            label={\"Country\"}\n                                            id=\"demo-simple-select\"\n                                            value={this.firstActiveRegion}\n                                            onChange={this.handleChangeFirstActiveRegion}\n                                        >\n                                            <MenuItem value={'uk'}>United Kingdom</MenuItem>\n                                            <MenuItem value={'us'}>United States</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                    <FormControl style={{minWidth: 120, margin: 10}}>\n                                        <InputLabel shrink id=\"demo-simple-select-placeholder-label-label\">\n                                            2.Country\n                                        </InputLabel>\n                                        <Select\n                                            label={\"Country\"}\n                                            id=\"demo-simple-select\"\n                                            value={this.secondActiveRegion}\n                                            onChange={this.handleChangeSecondActiveRegion}\n                                        >\n                                            <MenuItem value={'uk'}>United Kingdom</MenuItem>\n                                            <MenuItem value={'us'}>United States</MenuItem>\n                                        </Select>\n                                    </FormControl>\n                                </div>\n                            </div>\n                            <DateRange\n                                ranges={[this.getSelectionRange]}\n                                editableDateInputs={true}\n                                moveRangeOnFirstSelection={false}\n                                onChange={this.handleSelect}\n                            />\n                        </div>\n                        <Button variant=\"contained\" onClick={this.getKeywords} color=\"primary\">Get</Button>\n                        <Bar data={this.state.data} options={options} type={\"bar\"}/>\n                        <div style={{display: \"flex\", flexDirection: \"column\"}}>\n                            <h6>Average Confidence Scores</h6>\n                            <div style={{display: \"flex\", flexDirection: \"row\"}}>\n                                <div>\n                                    <h6>{this.firstProduct}</h6>\n                                    <ul>\n                                        <li>Positive:{this.state.firstPositiveProductMean.toFixed(2)}\n                                        </li>\n                                        <li>Negative:{this.state.firstNegativeProductMean.toFixed(2)}</li>\n                                        <li>Neutral:{this.state.firstNeutralProductMean.toFixed(2)}</li>\n                                    </ul>\n                                </div>\n                                <div>\n                                    <h6>{this.secondProduct}</h6>\n                                    <ul>\n                                        <li>Positive:{this.state.secondPositiveProductMean.toFixed(2)}\n                                        </li>\n                                        <li>Negative:{this.state.secondNegativeProductMean.toFixed(2)}</li>\n                                        <li>Neutral:{this.state.secondNeutralProductMean.toFixed(2)}</li>\n\n                                    </ul>\n                                </div>\n\n                            </div>\n                        </div>\n\n                        <br/>\n                    </div>\n                    <div style={{display: \"flex\", width: \"50%\", flexDirection: \"column\"}}>\n\n                        <TableList title={'Unexpected Negatives of '+ this.firstProduct.toUpperCase()} rows={this.state.outliers1.filter(k => k.rating == 5).slice(0,5)} />\n                        <TableList title={'Unexpected Positives of  '+ this.firstProduct.toUpperCase() } rows={this.state.outliers1.filter(k => k.rating == 1).slice(0,5)} />\n                        <TableList title={'Unexpected Negatives of  '+ this.secondProduct.toUpperCase()} rows={this.state.outliers2.filter(k => k.rating == 5).slice(0,5)} />\n                        <TableList title={'Unexpected Positives of  '+ this.secondProduct.toUpperCase()} rows={this.state.outliers2.filter(k => k.rating == 1).slice(0,5)} />\n                        <br/>\n                        <TableList title={'Extreme reviews of '+ this.firstProduct.toUpperCase()} rows={this.state.extremePositive1} />\n                        <TableList title={'Extreme reviews of '+ this.firstProduct.toUpperCase() } rows={this.state.extremeNegative1} />\n                        <TableList title={'Extreme reviews of '+ this.secondProduct.toUpperCase()} rows={this.state.extremePositive2} />\n                        <TableList title={'Extreme reviews of '+ this.secondProduct.toUpperCase()} rows={this.state.extremeNegative2} />\n                        {renderLoading()}\n\n                    </div>\n                </div>\n\n            </div>\n        );\n    }\n\n}\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Home } from \"./routes/home/index\";\nimport { Route, BrowserRouter } from \"react-router-dom\";\n\nconst App = () => {\n\n  return (\n    <div style={{ height: \"100%\", width: \"100%\" }}>\n      <Route exact path=\"/\"  component={Home} key=\"home\" />\n    </div>\n  );\n};\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}